{"version":3,"file":"static/js/365.d0186aa1.chunk.js","mappings":"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","sources":["Components/ResetPasswordForm.js","Components/utils/UtilsFuntion.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { Form, Button, Container, Row, Col, Modal } from \"react-bootstrap\";\r\nimport LoginForm from \"../Images/login-form.png\";\r\nimport LoginFormLogo from \"../Images/Logo.png\";\r\nimport * as Yup from \"yup\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { useFormik } from \"formik\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faEye, faEyeSlash } from \"@fortawesome/free-solid-svg-icons\";\r\nimport axios from \"axios\";\r\nimport { toaster } from \"./utils/UtilsFuntion\";\r\n//localhost:7004/api/ClientLogin/ValidateClientEmail/Testuser%40gmail.com\r\n\r\nconst ResetPasswordForm = () => {\r\n  const [passwordVisible, setPasswordVisible] = useState(false);\r\n  const [confirmPasswordVisible, setConfirmPasswordVisible] = useState(false);\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [isVerified, setIsVerified] = useState(false);\r\n  const [email, setEmail] = useState(\"\");\r\n  const navigate = useNavigate();\r\n\r\n  const openModal = () => {\r\n    setIsOpen(true);\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setIsOpen(false);\r\n  };\r\n\r\n  const handleOutsideClick = (event) => {\r\n    if (event.target.className.includes(\"modal add-question-modal\")) {\r\n      closeModal();\r\n    }\r\n  };\r\n\r\n  const BackToLogin = () => {\r\n    navigate(\"/Login\");\r\n  };\r\n\r\n  const handleVerifyEmail = () => {\r\n    setIsVerified(true);\r\n  };\r\n  \r\n  const resetPassword = async () => {\r\n      try {\r\n          const request = {\r\n              emailId: email,\r\n              newPassword: formik.values.newPassword,\r\n              confirmPassword: formik.values.confirmPassword\r\n          }\r\n          const response = await axios.post(`https://localhost:7004/api/ClientLogin/UpdateClientUser`, request);\r\n          if (response.status === 200) {\r\n            console.log(\"changepassword\",response.data)\r\n              localStorage.removeItem('token');\r\n              navigate('/login')\r\n          }\r\n      } catch (error) {\r\n          console.log(error, \" Error\")\r\n          toaster('error', error.response.data.message)\r\n      }\r\n  }\r\n  const PasswordRegex =\r\n    /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*]).{8,}$/;\r\n  const validationSchema = Yup.object().shape({\r\n    newPassword: Yup.string()\r\n      .required(\"New password is required\")\r\n      .min(8, \"Minimum 8 characters required\")\r\n      .max(32, \"Maximum allowed characters are 32\")\r\n      .matches(\r\n        PasswordRegex,\r\n        \"Password must contain atleast one Captial letter, number and a special character\"\r\n      ),\r\n    confirmPassword: Yup.string()\r\n      .required(\"Confirm your password\")\r\n      .oneOf([Yup.ref(\"newPassword\"), null], \"newPassword must match\")\r\n      .matches(\r\n        PasswordRegex,\r\n        \"Password must contain atleast one Captial letter, number and a special character\"\r\n      ),\r\n  });\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      newPassword: \"\",\r\n      confirmPassword: \"\",\r\n    },\r\n    // onSubmit: resetPassword,\r\n    validationSchema: validationSchema,\r\n  });\r\n\r\n  const handleInputChange = (fieldName, value) => {\r\n    formik.setFieldValue(fieldName, value);\r\n  };\r\n\r\n  const togglePasswordVisibility = () => {\r\n    setPasswordVisible(!passwordVisible);\r\n  };\r\n\r\n  const toggleConfirmPasswordVisibility = () => {\r\n    setConfirmPasswordVisible(!confirmPasswordVisible);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <section className=\"d-flex\">\r\n        <Container fluid>\r\n          <Row className=\"p-0\">\r\n            <Col lg={6} className=\"p-0\">\r\n              <img src={LoginForm} className=\"w-100 left-side-image\" alt=\"\" />\r\n            </Col>\r\n            <Col\r\n              lg={6}\r\n              className=\"d-flex justify-content-center align-items-center flex-column py-4\"\r\n            >\r\n              <div\r\n                className=\"d-flex justify-content-center flex-column\"\r\n                style={{ width: \"50%\" }}\r\n              >\r\n                <img src={LoginFormLogo} alt=\"\" className=\"w-100 mb-5\" />\r\n                <Form className=\"w-100\">\r\n                  {!isVerified ? (\r\n                    <>\r\n                      <h5 className=\"mb-4 fw-medium\">ENTER YOUR EMAIL</h5>\r\n                      <Form.Group className=\"mb-5\" controlId=\"verifyEmailInput\">\r\n                        <Form.Label>Email</Form.Label>\r\n                        <Form.Control type=\"email\" placeholder=\"Enter Email\" />\r\n                      </Form.Group>\r\n                      <Button\r\n                        variant=\"primary\"\r\n                        className=\"login-form-btn form-control mb-5\"\r\n                        onClick={handleVerifyEmail}\r\n                      >\r\n                        VERIFY\r\n                      </Button>\r\n                    </>\r\n                  ) : (\r\n                    <>\r\n                      <h5 className=\"mb-4 fw-medium\">RESET PASSWORD</h5>\r\n                      <Form.Group className=\"mb-3\" controlId=\"emailInput\">\r\n                        <Form.Label>Email</Form.Label>\r\n                        <Form.Control type=\"email\" placeholder=\"Enter Email\" />\r\n                      </Form.Group>\r\n                      <Form.Group className=\"mb-3\" controlId=\"newPasswordInput\">\r\n                        <Form.Label>New Password</Form.Label>\r\n                        <div className=\"LoginFormPasswordInput\">\r\n                          <Form.Control\r\n                            name=\"newPassword\"\r\n                            type={passwordVisible ? \"text\" : \"password\"}\r\n                            className=\"loginFormInput\"\r\n                            placeholder=\"Enter New Password\"\r\n                            value={formik.values.newPassword}\r\n                            onChange={(e) => {\r\n                              handleInputChange(\"newPassword\", e.target.value);\r\n                            }}\r\n                            onBlur={formik.handleBlur}\r\n                          />\r\n                          <FontAwesomeIcon\r\n                            icon={passwordVisible ? faEyeSlash : faEye}\r\n                            onClick={togglePasswordVisibility}\r\n                            className=\"LoginPagePasswordIcon\"\r\n                          />\r\n                        </div>\r\n                        {formik.touched.newPassword &&\r\n                          formik.errors.newPassword && (\r\n                            <Form.Text className=\"text-danger\">\r\n                              {formik.errors.newPassword}{\" \"}\r\n                            </Form.Text>\r\n                          )}\r\n                      </Form.Group>\r\n                      <Form.Group\r\n                        className=\"mb-3\"\r\n                        controlId=\"confirmPasswordInput\"\r\n                      >\r\n                        <Form.Label>Confirm Password</Form.Label>\r\n                        <div className=\"LoginFormPasswordInput\">\r\n                          <Form.Control\r\n                            name=\"confirmPassword\"\r\n                            type={confirmPasswordVisible ? \"text\" : \"password\"}\r\n                            placeholder=\"Re-Enter New Password\"\r\n                            value={formik.values.confirmPassword}\r\n                            onChange={(e) => {\r\n                              handleInputChange(\r\n                                \"confirmPassword\",\r\n                                e.target.value\r\n                              );\r\n                            }}\r\n                            onBlur={formik.handleBlur}\r\n                          />\r\n                          <FontAwesomeIcon\r\n                            icon={confirmPasswordVisible ? faEyeSlash : faEye}\r\n                            onClick={toggleConfirmPasswordVisibility}\r\n                            className=\"LoginPagePasswordIcon\"\r\n                          />\r\n                        </div>\r\n                        {formik.touched.confirmPassword &&\r\n                          formik.errors.confirmPassword && (\r\n                            <Form.Text className=\"text-danger\">\r\n                              {formik.errors.confirmPassword}{\" \"}\r\n                            </Form.Text>\r\n                          )}\r\n                      </Form.Group>\r\n                      <Button\r\n                        variant=\"primary\"\r\n                        className=\"login-form-btn form-control my-4\"\r\n                        onClick={openModal}\r\n                      >\r\n                        RESET\r\n                      </Button>\r\n                    </>\r\n                  )}\r\n                </Form>\r\n                <Modal show={isOpen} onHide={closeModal} centered>\r\n                  <Modal.Body className=\"py-2 \">\r\n                    <h5 className=\"modal-box-heading text-center\">\r\n                      PASSWORD RESET SUCCESSFUL!\r\n                    </h5>\r\n                    <div className=\"d-grid gap-2 col-6 mx-auto py-4\">\r\n                      <Button\r\n                        variant=\"primary\"\r\n                        className=\"login-form-btn\"\r\n                        onClick={BackToLogin}\r\n                      >\r\n                        LOGIN NOW\r\n                      </Button>\r\n                    </div>\r\n                  </Modal.Body>\r\n                </Modal>\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ResetPasswordForm;\r\n","import { toast } from \"react-toastify\";\r\n\r\nexport const toaster = (type, message) => {\r\n    toast[type](message, {\r\n        position: 'top-right',\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n        theme: 'light',\r\n    })\r\n}"],"names":["ResetPasswordForm","passwordVisible","setPasswordVisible","useState","confirmPasswordVisible","setConfirmPasswordVisible","isOpen","setIsOpen","isVerified","setIsVerified","email","setEmail","navigate","useNavigate","closeModal","PasswordRegex","validationSchema","Yup","shape","newPassword","required","min","max","matches","confirmPassword","oneOf","formik","useFormik","initialValues","handleInputChange","fieldName","value","setFieldValue","_jsx","children","className","Container","fluid","_jsxs","Row","Col","lg","src","LoginForm","alt","style","width","LoginFormLogo","Form","_Fragment","Group","controlId","Label","Control","type","placeholder","name","values","onChange","e","target","onBlur","handleBlur","FontAwesomeIcon","icon","faEyeSlash","faEye","onClick","togglePasswordVisibility","touched","errors","Text","toggleConfirmPasswordVisibility","Button","variant","openModal","handleVerifyEmail","Modal","show","onHide","centered","Body","BackToLogin","toaster","message","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme"],"sourceRoot":""}